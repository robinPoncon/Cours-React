{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","isAddForm","isTypesValid","handleSubmit","preventDefault","newForm","startsWith","endsWith","test","validateForm","updatePokemon","addPokemon","onSubmit","deletePokemon","htmlFor","marginBottom","disabled","checked","concat","currentType","selectType","PokemonEdit","Pokemon","PokemonAdd","getTime","AuthenticationService","username","password","isAuthenticated","setTimeout","Login","message","setMessage","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","PokemonDetail","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.edb8d096.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n}\n\nexport default formatDate;","const formatType = (type: string): string => {\n    let color: string;\n    switch (type) {\n        case \"Feu\":\n            color = \"red lighten-1\";\n            break;\n        case \"Eau\":\n            color = \"blue lighten-1\";\n            break;\n        case \"Plante\":\n            color = \"green lighten-1\";\n            break;\n        case \"Insecte\":\n            color = \"brown lighten-1\";\n            break;\n        case \"Normal\":\n            color = \"grey lighten-3\";\n            break;\n        case \"Vol\":\n            color = \"blue lighten-3\";\n            break;\n        case \"Poison\":\n            color = \"deep-purple accent-1\";\n            break;\n        case \"Fée\":\n            color = \"pink lighten-4\";\n            break;\n        case \"Psy\":\n            color = \"deep-purple darken-2\";\n            break;\n        case \"Electrik\":\n            color = \"lime accent-1\";\n            break;\n        case \"Combat\":\n            color = \"deep-orange\";\n            break;\n        default:\n            color = \"grey\";\n            break;\n    }\n\n    return `chip ${color}`;\n}\n\nexport default formatType;","import React, { FunctionComponent, useState } from \"react\";\nimport Pokemon from \"../models/pokemon\";\nimport \"./pokemon-card.css\";\nimport formatDate from \"../helpers/format-date\";\nimport formatType from \"../helpers/format-type\";\nimport { useHistory } from \"react-router-dom\";\n\ntype Props = {\n    pokemon: Pokemon,\n    borderColor?: string\n};\n\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = \"#009688\"}) =>\n{\n    const [color, setColor] = useState<string>();\n    const history = useHistory();\n\n    const showBorder = () => {\n        setColor(borderColor);\n    }\n\n    const hideBorder = () => {\n        setColor(\"#f5f5f5\");\n    }\n\n    const goToPokemon = (id: number) => {\n        history.push(`/pokemons/${id}`);\n    }\n\n    return (\n        <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\n            <div className=\"card horizontal\" style={{borderColor: color}}>\n                <div className=\"card-image\">\n                    <img src={pokemon.picture} alt={pokemon.name}/>\n                </div>\n                <div className=\"card-stacked\">\n                    <div className=\"card-content\">\n                        <p>{pokemon.name}</p>\n                        <p><small>{formatDate(pokemon.created)}</small></p>\n                        {pokemon.types.map(type => (\n                            <span key={type} className={formatType(type)}>{type}</span>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PokemonCard;","import Pokemon from \"./pokemon\";\nexport const POKEMONS: Pokemon[] = [\n    {\n        id: 1,\n        name: \"Bulbizarre\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\n        types: [\"Plante\", \"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 2,\n        name: \"Salamèche\",\n        hp: 28,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    },\n    {\n        id: 3,\n        name: \"Carapuce\",\n        hp: 21,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\n        types: [\"Eau\"],\n        created: new Date()\n    },\n    {\n        id: 4,\n        name: \"Aspicot\",\n        hp: 16,\n        cp: 2,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\n        types: [\"Insecte\", \"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 5,\n        name: \"Roucool\",\n        hp: 30,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\n        types: [\"Normal\", \"Vol\"],\n        created: new Date()\n    },\n    {\n        id: 6,\n        name: \"Rattata\",\n        hp: 18,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 7,\n        name: \"Piafabec\",\n        hp: 14,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\n        types: [\"Normal\", \"Vol\"],\n        created: new Date()\n    },\n    {\n        id: 8,\n        name: \"Abo\",\n        hp: 16,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\n        types: [\"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 9,\n        name: \"Pikachu\",\n        hp: 21,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\n        types: [\"Electrik\"],\n        created: new Date()\n    },\n    {\n        id: 10,\n        name: \"Sabelette\",\n        hp: 19,\n        cp: 3,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 11,\n        name: \"Mélofée\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\n        types: [\"Fée\"],\n        created: new Date()\n    },\n    {\n        id: 12,\n        name: \"Goupix\",\n        hp: 17,\n        cp: 8,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    }\n];\n","import Pokemon from \"../models/pokemon\";\nimport {POKEMONS} from \"../models/mock-pokemon\";\n\nexport default class PokemonService {\n\n    static pokemons:Pokemon[] = POKEMONS;\n\n    static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\");\n\n    static getPokemons(): Promise<Pokemon[]> {\n        if(this.isDev)\n        {\n            return fetch(\"http://localhost:3001/pokemons\")\n                .then(response => response.json())\n                .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n           resolve(this.pokemons);\n        });\n    }\n\n    static getPokemon(id: number): Promise<Pokemon|null> {\n        if(this.isDev)\n        {\n            return fetch(`http://localhost:3001/pokemons/${id}`)\n                .then(response => response.json())\n                .then(data => this.isEmpty(data) ? null : data)\n                .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n           resolve(this.pokemons.find(pokemon => id === pokemon.id));\n        });\n    }\n\n    static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n        if (this.isDev)\n        {\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n                method: \"PUT\",\n                body: JSON.stringify(pokemon),\n                headers: {\"Content-Type\": \"application/json\"}\n            })\n                .then(response => response.json())\n                .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n           const {id} = pokemon;\n           const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n           this.pokemons[index] = pokemon;\n           resolve(pokemon);\n        });\n    }\n\n    static deletePokemon(pokemon: Pokemon): Promise<{}> {\n        if(this.isDev)\n        {\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n                method: \"DELETE\",\n                headers: {\"Content-Type\": \"application/json\"}\n            })\n                .then(response => response.json())\n                .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n            const { id } = pokemon;\n            this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n            resolve({});\n        })\n    }\n\n    static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n        if (this.isDev)\n        {\n            return fetch(`http://localhost:3001/pokemons`, {\n                method: \"POST\",\n                body: JSON.stringify(pokemon),\n                headers: { \"Content-Type\": \"application/json\"}\n            })\n                .then(response => response.json())\n                .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n           this.pokemons.push(pokemon);\n           resolve(pokemon);\n        });\n    }\n\n    static searchPokemon(term: string): Promise<Pokemon[]> {\n        if (this.isDev)\n        {\n            return fetch(`http://localhost:3001/pokemons?q=${term}`)\n                .then(response => response.json())\n                .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n           const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n           resolve(results);\n        });\n    }\n\n    static isEmpty(data: Object): boolean {\n       return Object.keys(data).length === 0;\n    }\n\n    static handleError(error: Error): void {\n        console.error(error);\n    }\n}","import React, {FunctionComponent, useState} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonService from \"../services/pokemon-service\";\n\nconst PokemonSearch: FunctionComponent = () => {\n    const [term, setTerm] = useState<string>(\"\");\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const term = e.target.value;\n        setTerm(term);\n\n        if (term.length <= 1)\n        {\n           setPokemons([]);\n           return;\n        }\n\n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col s12 m6 offset-m3\">\n                <div className=\"card\">\n                    <div className=\"card-content\">\n                        <div className=\"input-field\">\n                            <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)}/>\n                        </div>\n                        <div className=\"collection\">\n                            {pokemons.map((pokemon) => (\n                                <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\n                                    {pokemon.name}\n                                </Link>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonCard from \"../components/pokemon-card\";\nimport PokemonService from \"../services/pokemon-service\";\nimport {Link} from \"react-router-dom\";\nimport PokemonSearch from \"../components/pokemon-search\";\n\nconst PokemonList: FunctionComponent = () => {\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n\n    useEffect(() => {\n       PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\n    }, []);\n\n    return(\n        <div>\n            <h1 className=\"center\">Pokédex</h1>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <PokemonSearch/>\n                    {pokemons.map(pokemon => (\n                      <PokemonCard key={pokemon.id} pokemon={pokemon}/>\n                    ))}\n                </div>\n                <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\n                      style={{position: \"fixed\", bottom: \"25px\", right: \"25px\"}}\n                      to=\"/pokemons/add\">\n                    <i className=\"material-icons\">add</i>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default PokemonList;","import React, {FunctionComponent} from \"react\";\n\nconst Loader: FunctionComponent = () => {\n    return (\n        <div className=\"preloader-wrapper big active\">\n            <div className=\"spinner-layer spinner-blue\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"/>\n                </div>\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"/>\n                </div>\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Loader;\n","import React, {FunctionComponent, useState, useEffect} from \"react\";\nimport {RouteComponentProps, Link} from \"react-router-dom\";\nimport Pokemon from \"../models/pokemon\";\nimport formatDate from \"../helpers/format-date\";\nimport formatType from \"../helpers/format-type\";\nimport PokemonService from \"../services/pokemon-service\";\nimport Loader from \"../components/loader\";\n\ntype Params = {id: string};\n\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n\n    useEffect(() => {\n      PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n    }, [match.params.id]);\n\n    return(\n        <div>\n            { pokemon ? (\n                <div className=\"row\">\n                    <div className=\"col s12 m8 offset-m2\">\n                        <h2 className=\"header center\">{pokemon.name}</h2>\n                        <div className=\"card hoverable\">\n                            <div className=\"card-image\">\n                                <img src={pokemon.picture} alt={pokemon.name} style={{width: \"250px\", margin: \"0 auto\"}}/>\n                                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\n                                    <i className=\"material-icons\">edit</i>\n                                </Link>\n                            </div>\n                            <div className=\"card-stacked\">\n                                <div className=\"card-content\">\n                                    <table className=\"bordered striped\">\n                                        <tbody>\n                                            <tr>\n                                                <td>Nom</td>\n                                                <td><strong>{pokemon.name}</strong></td>\n                                            </tr>\n                                            <tr>\n                                                <td>Points de vie</td>\n                                                <td><strong>{pokemon.hp}</strong></td>\n                                            </tr>\n                                            <tr>\n                                                <td>Dégâts</td>\n                                                <td><strong>{pokemon.cp}</strong></td>\n                                            </tr>\n                                            <tr>\n                                                <td>Types</td>\n                                                <td>\n                                                    {pokemon.types.map(type => (\n                                                        <span key={type} className={formatType(type)}>{type}</span>\n                                                    ))}\n                                                </td>\n                                            </tr>\n                                            <tr>\n                                                <td>Date de création</td>\n                                                <td>{formatDate(pokemon.created)}</td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                                <div className=\"card-action\">\n                                    <Link to=\"/\">Retour</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <h4 className=\"center\"><Loader/></h4>\n            )}\n        </div>\n    );\n}\n\nexport default PokemonsDetail;","import React, { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst PageNotFound: FunctionComponent = () => {\n    return(\n        <div className=\"center\">\n            <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n            <h1>Hey, cette page n'existe pas !</h1>\n            <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n                Retourner à l'accueil\n            </Link>\n        </div>\n    )\n}\n\nexport default PageNotFound;","import React, { FunctionComponent, useState} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Pokemon from \"../models/pokemon\";\nimport formatType from \"../helpers/format-type\";\nimport PokemonService from \"../services/pokemon-service\";\n\ntype Props = {\n    pokemon: Pokemon,\n    isEditForm: boolean\n};\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n}\n\ntype Form = {\n    picture: Field,\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n\n    const [form, setForm] = useState<Form>({\n        picture: {value: pokemon.picture, isValid: true},\n       name: { value: pokemon.name, isValid: true},\n        hp: { value: pokemon.hp, isValid: true},\n        cp: { value: pokemon.cp, isValid: true},\n        types: { value: pokemon.types, isValid: true}\n    });\n\n    const history = useHistory();\n\n    const types: string[] = [\n      \"Plante\", \"Feu\", \"Eau\", \"Insecte\", \"Normal\", \"Electrik\", \"Poison\", \"Fée\", \"Vol\", \"Combat\", \"Psy\"\n    ];\n\n    const hasType = (type: string): boolean => {\n        return form.types.value.includes(type);\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: {value: fieldValue}};\n\n        setForm({...form, ...newField});\n    }\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n\n        if(checked) {\n            // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n            const newTypes: string[] = form.types.value.concat([type]);\n            newField = { value: newTypes };\n        }\n        else {\n            // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n            newField = { value: newTypes };\n        }\n\n        setForm({...form, ...{types: newField}});\n    }\n\n    const isAddForm = () => {\n        return !isEditForm;\n    }\n\n    const validateForm = () => {\n        let newForm: Form = form;\n\n        // Validator url\n\n        if(isAddForm)\n        {\n            const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n            const end = \".png\";\n\n            if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end))\n            {\n                const errorMsg: string = \"L'url n'est pas valide.\";\n                const newField: Field = {value: form.picture.value, error: errorMsg, isValid: false};\n                newForm = {...newForm, ...{picture: newField}};\n            }\n            else\n            {\n                const newField: Field = {value: form.picture.value, error: \"\", isValid: true};\n                newForm = {...newForm, ...{picture: newField}};\n            }\n        }\n\n        // Validator name\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n            const errorMsg: string = \"Le nom du pokemon est requis (3-25).\";\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false};\n            newForm = {...newForm, ...{name: newField}};\n        }\n        else {\n            const newField: Field = {value: form.name.value, error: \"\", isValid: true};\n            newForm = {...newForm, ...{name: newField}};\n        }\n\n        // Validator hp\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n            const errorMsg: string = \"Les points de vie du pokémon sont compris entre 0 et 999.\";\n            const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n            newForm = {...newForm, ...{hp: newField}};\n        }\n        else {\n            const newField: Field = {value: form.hp.value, error: \"\", isValid: true};\n            newForm = {...newForm, ...{hp: newField}};\n        }\n\n        // Validator cp\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n            const errorMsg: string = \"Les dégâts du pokémon sont compris entre 0 et 99\";\n            const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n            newForm = {...newForm, ...{cp: newField}};\n        }\n        else {\n            const newField: Field = {value: form.cp.value, error: \"\", isValid: true};\n            newForm = {...newForm, ...{cp: newField}};\n        }\n\n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n    }\n\n    const isTypesValid = (type: string): boolean => {\n        // Cas n°1 : Le pokémon a un seul type, qui correspond au type passé en paramètre.\n        // Dans ce cas on renvoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n        if (form.types.value.length === 1 && hasType(type))\n        {\n            return false;\n        }\n\n        // Cas n °2 : Le pokémon a au moins 3 types.\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n        if (form.types.value.length >= 3 && !hasType(type))\n        {\n            return false;\n        }\n\n        // Après avoir passé les deux tests ci-dessus, on renvoie \"true\",\n        // c'est à dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n        return true;\n\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const isFormValid = validateForm();\n        if(isFormValid)\n        {\n            pokemon.picture = form.picture.value;\n            pokemon.name = form.name.value;\n            pokemon.hp = form.hp.value;\n            pokemon.cp = form.cp.value;\n            pokemon.types = form.types.value;\n\n            isEditForm ? updatePokemon() : addPokemon();\n        }\n    }\n\n    const addPokemon = () => {\n        PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons`));\n    }\n\n    const updatePokemon = () => {\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n\n    const deletePokemon= () => {\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n    }\n\n    return (\n        <form onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <div className=\"card hoverable\">\n                        {isEditForm && (\n                        <div className=\"card-image\">\n                            <img src={pokemon.picture} alt={pokemon.name} style={{width: \"250px\", margin: \"0 auto\"}}/>\n                            <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n                            </span>\n                        </div>\n                        )}\n                        <div className=\"card-stacked\">\n                            <div className=\"card-content\">\n                                {isAddForm && (\n                                /* Pokemon picture */\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"picture\">Image</label>\n                                    <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\"\n                                           onChange={e => handleInputChange(e)} value={form.picture.value}/>\n                                    {form.picture.error &&\n                                    <div className=\"card-panel red accent-1\">\n                                        {form.picture.error}\n                                    </div>\n                                    }\n                                </div>\n                                    )}\n                                {/* Pokemon name */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Nom</label>\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\"\n                                           onChange={e => handleInputChange(e)} value={form.name.value}/>\n                                    {form.name.error &&\n                                        <div className=\"card-panel red accent-1\">\n                                            {form.name.error}\n                                        </div>\n                                    }\n                                </div>\n                                {/* Pokemon hp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"hp\">Point de vie</label>\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\"\n                                           onChange={e => handleInputChange(e)} value={form.hp.value}/>\n                                    {form.hp.error &&\n                                    <div className=\"card-panel red accent-1\">\n                                        {form.hp.error}\n                                    </div>\n                                    }\n                                </div>\n                                {/* Pokemon cp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"cp\">Dégâts</label>\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\"\n                                           onChange={e => handleInputChange(e)} value={form.cp.value}/>\n                                    {form.cp.error &&\n                                    <div className=\"card-panel red accent-1\">\n                                        {form.cp.error}\n                                    </div>\n                                    }\n                                </div>\n                                {/* Pokemon types */}\n                                <div className=\"form-group\">\n                                    <label>Types</label>\n                                    {types.map(type => (\n                                        <div key={type} style={{marginBottom: \"10px\"}}>\n                                            <label>\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type}\n                                                       disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}/>\n                                                <span>\n                                                    <p className={formatType(type)}>{ type }</p>\n                                                </span>\n                                            </label>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                            <div className=\"card-action center\">\n                                {/* Submit Button */}\n                                <button type=\"submit\" className=\"btn\">Valider</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default PokemonForm;\n\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport PokemonForm from \"../components/pokemon-form\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonService from \"../services/pokemon-service\";\nimport Loader from \"../components/loader\";\n\ntype Params = { id: string};\n\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match}) => {\n    const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n\n    useEffect(() => {\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n    }, [match.params.id]);\n\n    return (\n        <div>\n            { pokemon ? (\n                <div className=\"row\">\n                    <h2 className=\"header center\">Éditer {pokemon.name}</h2>\n                    <PokemonForm pokemon={pokemon} isEditForm={true}/>\n                </div>\n            ) : (\n                <h4 className=\"center\"><Loader/></h4>\n            )}\n        </div>\n    );\n}\n\nexport default PokemonEdit;","export default class Pokemon\n{\n    // 1. Typage des propriétés d'un pokemon\n    id: number;\n    hp: number;\n    cp: number;\n    name: string;\n    picture: string;\n    types: Array<string>;\n    created: Date;\n\n    // 2. Définition des valeurs par defaut des propriétés d'un pokemon\n    constructor(\n        id: number,\n        hp: number = 100,\n        cp: number = 10,\n        name: string = \"...\",\n        picture: string = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png\",\n        types: Array<string> = [\"Normal\"],\n        created: Date = new Date()\n    )\n    {\n        // 3. Initialisation des propriétés d'un pokemon\n        this.id = id;\n        this.hp = hp;\n        this.cp = cp;\n        this.name = name;\n        this.picture = picture;\n        this.types = types;\n        this.created = created;\n    }\n}","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport PokemonForm from \"../components/pokemon-form\";\nimport Pokemon from \"../models/pokemon\";\n\nconst PokemonAdd: FunctionComponent = () => {\n    const [id] = useState<number>(new Date().getTime());\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\n\n    return (\n        <div>\n            <div className=\"row\">\n                <h2 className=\"header center\">Ajouter un pokémon</h2>\n                <PokemonForm pokemon={pokemon} isEditForm={false}/>\n            </div>\n        </div>\n    );\n}\n\nexport default PokemonAdd;","export default class AuthenticationService {\n    static isAuthenticated: boolean = false;\n\n    static login(username: string, password: string): Promise<boolean> {\n        const isAuthenticated = (username === \"admin\" && password === \"admin01360\");\n\n        return new Promise(resolve => {\n            setTimeout(() => {\n                this.isAuthenticated = isAuthenticated;\n                resolve(isAuthenticated);\n            }, 1000);\n        })\n    }\n}","import React, {FunctionComponent, useState} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthenticationService from \"../services/authentication-service\";\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean\n}\n\ntype Form = {\n    username: Field,\n    password: Field\n}\n\nconst Login: FunctionComponent = () => {\n    const history = useHistory();\n\n    const [form, setForm] = useState<Form>({\n        username: { value: \"\"},\n        password: { value: \"\"}\n    });\n\n    const [message, setMessage] = useState<string>(\"Vous êtes déconnecté. (pikachu / pikachu)\");\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = { [fieldName]: { value: fieldValue}};\n\n        setForm({...form, ...newField});\n    }\n\n    const validateForm = () => {\n        let newForm: Form = form;\n\n        // Validator username\n        if (form.username.value.length < 3){\n            const errorMsg: string = \"Votre prénom doit faire au moins 3 caractères de long.\";\n            const newField: Field = {value: form.username.value, error: errorMsg, isValid: false};\n            newForm = {...newForm, ...{username: newField}};\n        }\n        else\n        {\n            const newField: Field = {value: form.username.value, error: \"\", isValid: true};\n            newForm = {...newForm, ... { username: newField}};\n        }\n\n        // Validator password\n        if (form.password.value.length < 6)\n        {\n            const errorMsg: string = \"Votre mot de passe doit faire au moins 6 caractères de long.\";\n            const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\n            newForm = {... newForm, ...{password: newField}};\n        }\n        else\n        {\n            const newField: Field = {value: form.password.value, error: \"\", isValid: true};\n            newForm = {...newForm, ...{password: newField}};\n        }\n\n        setForm(newForm);\n\n        return newForm.username.isValid && newForm.password.isValid;\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const isFormValid = validateForm();\n        if (isFormValid) {\n            setMessage(\"Tentative de connexion en cours ...\");\n            AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\n                if (!isAuthenticated)\n                {\n                    setMessage(\"Identifiant ou mot de passe incorrect\");\n                    return;\n                }\n\n                history.push(\"/pokemons\");\n            });\n        }\n    }\n\n    return (\n        <form onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <div className=\"card hoverable\">\n                        <div className=\"card-content\">\n                            {/* Form message */}\n                            {message && <div className=\"form-group\">\n                                <div className=\"card-panel grey lighten-5\">\n                                    {message}\n                                </div>\n                            </div>}\n                            {/* Field username */}\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Identifiant</label>\n                                <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\"\n                                value={form.username.value} onChange={e => handleInputChange(e)}/>\n                                {/* Error */}\n                                {form.username.error &&\n                                <div className=\"card-panel red accent-1\">\n                                    {form.username.error}\n                                </div>}\n                            </div>\n                            {/* Field password */}\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Mot de passe</label>\n                                <input id=\"password\" type=\"text\" name=\"password\" className=\"form-control\"\n                                value={form.password.value} onChange={e => handleInputChange(e)}/>\n                                {/* Error */}\n                                {form.password.error &&\n                                <div className=\"card-panel red accent-1\">\n                                    {form.password.error}\n                                </div>}\n                            </div>\n                        </div>\n                        <div className=\"card-action center\">\n                            {/* Submit button */}\n                            <button type=\"submit\" className=\"btn\">Valider</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default Login;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport AuthenticationService from \"./services/authentication-service\";\n\nconst PrivateRoute = ({ component: Component, ...rest}: any) => (\n  <Route {...rest} render={(props) => {\n      const isAuthenticated = AuthenticationService.isAuthenticated;\n      if (!isAuthenticated) {\n          return <Redirect to={{ pathname: \"/login\"}} />\n      }\n\n      return <Component {...props} />\n  }} />\n);\n\nexport default PrivateRoute;","import React, { FunctionComponent } from \"react\";\nimport PokemonList from \"./pages/pokemon-list\";\nimport PokemonDetail from \"./pages/pokemon-detail\";\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport PageNotFound from \"./pages/page-not-found\";\nimport PokemonEdit from \"./pages/pokemon-edit\";\nimport PokemonAdd from \"./pages/pokemon-add\";\nimport Login from \"./pages/login\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst App: FunctionComponent = () => {\n\n    return(\n        <Router>\n            <div>\n                {/* La barre de navigation commun à toutes les pages*/}\n                    <nav>\n                        <div className=\"nav-wrapper teal\">\n                            <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\n                        </div>\n                    </nav>\n                {/* Le système de gestion des routes de notre application */}\n                <Switch>\n                    <PrivateRoute exact path=\"/\" component={PokemonList}/>\n                    <Route exact path=\"/login\" component={Login}/>\n                    <PrivateRoute exact path=\"/pokemons\" component={PokemonList}/>\n                    <PrivateRoute exact path=\"/pokemons/add\" component={PokemonAdd}/>\n                    <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit}/>\n                    <PrivateRoute path=\"/pokemons/:id\" component={PokemonDetail}/>\n                    <Route component={PageNotFound}/>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App;","// @ts-ignore\nimport React from \"react\";\n// @ts-ignore\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}